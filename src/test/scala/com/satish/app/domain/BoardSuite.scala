package com.satish.app.domain

import scala.util.Random

class BoardSuite extends munit.FunSuite {
  test("Empty board should not contain any cells") {
    val board = Board.empty
    assert(board.isEmpty)

    Cell.all.foreach { cell =>
      assert(board.isEmptyAt(cell))
    }

    Cell.all.foreach(cell => assert(!board.isFullAt(cell)))
  }

  test("test placing cell at a position") {
    val board = Board.empty
    val newBoard = board
      .placePiece(Cell(4).get, Piece.O)
      .placePiece(Cell(5).get, Piece.X)
      .placePiece(Cell(6).get, Piece.O)
    assert(!newBoard.isEmpty)
    assert(newBoard.pieceAt(Cell(4).get).contains(Piece.O))
    assert(newBoard.pieceAt(Cell(5).get).contains(Piece.X))
    assert(newBoard.pieceAt(Cell(6).get).contains(Piece.O))
  }

  //this complete test case was generated by copilot!!
  test("placing piece at all positions should make board full") {
    val board = Cell.all.foldLeft(Board.empty) { (board, cell) =>
      board.placePiece(cell, Piece.O)
    }
    assert(board.isFull)
  }

  test("placing random piece at all positions should make board full") {
    val board = Cell.all.foldLeft(Board.empty) { (board, cell) =>
      board.placePiece(cell, Random.shuffle(List(Piece.O, Piece.X)).head)
    }
    assert(board.isFull)
  }
}
